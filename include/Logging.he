//
//  Logging.he
//  TMWorkQueue
//
//  Created by David McKeone on 11-11-11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//


#ifndef LOGGING_HE_
#define LOGGING_HE_

#define USE_BOOST_LOG
#ifdef USE_BOOST_LOG

#include <iostream>

// Boost includes
#include <boost/shared_ptr.hpp>

//#include <boost/log/common.hpp>
//#include <boost/log/sinks.hpp>
//#include <boost/log/sources/logger.hpp>

namespace Logging {
    
    enum severity {
        trace = 0,
        debug,
        info,
        warning,
        error,
        fatal
    };
    
    //BOOST_LOG_INLINE_GLOBAL_LOGGER_DEFAULT(global_log, boost::log::sources::severity_logger_mt<severity>)
    
    void init();
    void stop();
}

// Macros for easy logging
/*#ifdef _DEBUG
#define LOG_TRACE BOOST_LOG_SEV(Logging::global_log::get(), Logging::trace)
#define LOG_DEBUG BOOST_LOG_SEV(Logging::global_log::get(), Logging::debug)
#define LOG_INFO BOOST_LOG_SEV(Logging::global_log::get(), Logging::info)
#define LOG_WARNING BOOST_LOG_SEV(Logging::global_log::get(), Logging::warning)
#define LOG_ERROR BOOST_LOG_SEV(Logging::global_log::get(), Logging::error)
#define LOG_FATAL BOOST_LOG_SEV(Logging::global_log::get(), Logging::fatal)
#else*/
#define LOG_TRACE std::cout
#define LOG_DEBUG std::cout
#define LOG_INFO std::cout
#define LOG_WARNING std::cout
#define LOG_ERROR std::cout
#define LOG_FATAL std::cout
//#endif

#endif  // USE_BOOST_LOG
#endif // LOGGING_HE_